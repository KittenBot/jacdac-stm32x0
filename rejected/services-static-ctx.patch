diff --git a/source/jd_services.c b/source/jd_services.c
index ab311e5..1379d9b 100644
--- a/source/jd_services.c
+++ b/source/jd_services.c
@@ -15,11 +15,15 @@
 
 #define MAX_SERV 32
 
-static srv_t **services;
-static uint8_t num_services, reset_counter, packets_sent;
+struct services_state {
+    uint64_t maxId;
+    srv_t **services;
+    uint8_t num_services, reset_counter, packets_sent;
+    uint32_t lastMax, lastDisconnectBlink;
+};
 
-static uint64_t maxId;
-static uint32_t lastMax, lastDisconnectBlink;
+// using static struct instead of separate variables saves around 60 bytes of flash on this file
+static struct services_state ctx;
 
 struct srv_state {
     SRV_COMMON;
@@ -137,59 +141,60 @@ void jd_services_process_frame(jd_frame_t *frame) {
 
 srv_t *jd_allocate_service(const srv_vt_t *vt) {
     // always allocate instances idx - it should be stable when we disable some services
-    if (num_services >= MAX_SERV)
+    if (ctx.num_services >= MAX_SERV)
         jd_panic();
     srv_t *r = jd_alloc(vt->state_size);
     r->vt = vt;
-    r->service_number = num_services;
-    services[num_services++] = r;
+    r->service_number = ctx.num_services;
+    ctx.services[ctx.num_services++] = r;
 
     return r;
 }
 
 void jd_services_init() {
-    num_services = 0;
+    ctx.num_services = 0;
     srv_t *tmp[MAX_SERV];
-    services = tmp;
+    ctx.services = tmp;
 
     jd_ctrl_init();
 #ifdef JD_CONSOLE
     jdcon_init();
 #endif
     app_init_services();
-    services = jd_alloc(sizeof(void *) * num_services);
-    memcpy(services, tmp, sizeof(void *) * num_services);
+    ctx.services = jd_alloc(sizeof(void *) * ctx.num_services);
+    memcpy(ctx.services, tmp, sizeof(void *) * ctx.num_services);
 }
 
 void jd_services_packet_queued() {
-    packets_sent++;
+    ctx.packets_sent++;
 }
 
 void jd_services_announce() {
     jd_alloc_stack_check();
 
-    uint32_t dst[num_services];
-    for (int i = 0; i < num_services; ++i)
-        dst[i] = services[i]->vt->service_class;
-    if (reset_counter < 0xf)
-        reset_counter++;
-    dst[0] = reset_counter | JD_ADVERTISEMENT_0_ACK_SUPPORTED | ((packets_sent + 1) << 16);
-    if (jd_send(JD_SERVICE_NUMBER_CONTROL, JD_CONTROL_CMD_SERVICES, dst, num_services * 4) == 0) {
-        packets_sent = 0;
+    uint32_t dst[ctx.num_services];
+    for (int i = 0; i < ctx.num_services; ++i)
+        dst[i] = ctx.services[i]->vt->service_class;
+    if (ctx.reset_counter < 0xf)
+        ctx.reset_counter++;
+    dst[0] = ctx.reset_counter | JD_ADVERTISEMENT_0_ACK_SUPPORTED | ((ctx.packets_sent + 1) << 16);
+    if (jd_send(JD_SERVICE_NUMBER_CONTROL, JD_CONTROL_CMD_SERVICES, dst, ctx.num_services * 4) ==
+        0) {
+        ctx.packets_sent = 0;
     }
 }
 
 static void handle_ctrl_tick(jd_packet_t *pkt) {
     if (pkt->service_command == JD_CONTROL_CMD_SERVICES) {
         // if we have not seen maxId for 1.1s, find a new maxId
-        if (pkt->device_identifier < maxId && in_past(lastMax + 1100000)) {
-            maxId = pkt->device_identifier;
+        if (pkt->device_identifier < ctx.maxId && in_past(ctx.lastMax + 1100000)) {
+            ctx.maxId = pkt->device_identifier;
         }
 
         // maxId? blink!
-        if (pkt->device_identifier >= maxId) {
-            maxId = pkt->device_identifier;
-            lastMax = now;
+        if (pkt->device_identifier >= ctx.maxId) {
+            ctx.maxId = pkt->device_identifier;
+            ctx.lastMax = now;
             led_blink(50);
         }
     }
@@ -210,8 +215,8 @@ void jd_services_handle_packet(jd_packet_t *pkt) {
     bool matched_devid = pkt->device_identifier == jd_device_id();
 
     if (pkt->flags & JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS) {
-        for (int i = 0; i < num_services; ++i) {
-            if (pkt->device_identifier == services[i]->vt->service_class) {
+        for (int i = 0; i < ctx.num_services; ++i) {
+            if (pkt->device_identifier == ctx.services[i]->vt->service_class) {
                 pkt->service_number = i;
                 matched_devid = true;
                 break;
@@ -224,21 +229,21 @@ void jd_services_handle_packet(jd_packet_t *pkt) {
 
     jd_app_handle_command(pkt);
 
-    if (pkt->service_number < num_services) {
-        srv_t *s = services[pkt->service_number];
+    if (pkt->service_number < ctx.num_services) {
+        srv_t *s = ctx.services[pkt->service_number];
         s->vt->handle_pkt(s, pkt);
     }
 }
 
 void jd_services_tick() {
-    if (jd_should_sample(&lastDisconnectBlink, 250000)) {
-        if (in_past(lastMax + 2000000)) {
+    if (jd_should_sample(&ctx.lastDisconnectBlink, 250000)) {
+        if (in_past(ctx.lastMax + 2000000)) {
             led_blink(5000);
         }
     }
 
-    for (int i = 0; i < num_services; ++i) {
-        services[i]->vt->process(services[i]);
+    for (int i = 0; i < ctx.num_services; ++i) {
+        ctx.services[i]->vt->process(ctx.services[i]);
     }
 
     jd_process_event_queue();
